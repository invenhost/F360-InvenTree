import adsk.core
import adsk.fusion
import adsk.cam

import os
from datetime import datetime

from ..apper import apper
from .. import functions
from .. import helpers
from .. import config


class UploadStepCommand(apper.Fusion360CommandBase):

    @apper.lib_import(config.lib_path)
    def on_execute(self, command: adsk.core.Command, command_inputs: adsk.core.CommandInputs, args, input_values):
        from inventree.part import PartAttachment

        try:
            ao = apper.AppObjects()

            if ao.ui.activeSelections.count == 1:
                occ = adsk.fusion.Occurrence.cast(ao.ui.activeSelections[0].entity)

                file_name = "{}.step".format(helpers.slugify(occ.component.name))

                temp_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), '.temp_export')
                if os.path.isdir(temp_dir) is False:
                    os.makedirs(temp_dir)

                temp_path = os.path.join(temp_dir, file_name)

                self._write_step(temp_path, occ.component)

                part = functions.inventree_get_part(occ.component.id)

                if part is False:
                    ao.ui.messageBox("Part is not synced with InvenTree yet")
                else:
                    if PartAttachment.upload_attachment(
                        functions.inv_api(),
                        part.pk,
                        attachment=temp_path,
                        comment="STEP file generated by InvenTreeLink on {}, revision {}".format(datetime.now(), occ.component.revisionId)
                    ) is False:
                        ao.ui.messageBox("Failed to upload!")
                    else:
                        ao.ui.messageBox("Succesfully attached STEP file to Part {}".format(part.pk))

                os.remove(temp_path)

            else:
                ao.ui.messageBox("Wrong number of entities selected: {}".format(ao.ui.activeSelections.count))
        except Exception as _e:
            config.app_tracking.capture_exception(_e)
            raise _e

    def _write_step(self, output_path, component: adsk.fusion.Component):
        file_path = output_path
        if os.path.exists(file_path):
            print("Step file \"{}\" already exists".format(file_path))
            return

        print("Writing step file \"{}\"".format(file_path))
        export_manager = component.parentDesign.exportManager

        options = export_manager.createSTEPExportOptions(output_path, component)

        if export_manager.execute(options) is False:
            ao = apper.AppObjects()
            ao.ui.messageBox("Failed to export STEP")
